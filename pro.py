#-------------------------------------##-------------------------------------#
# ENCRYPTED BY : PARVEJ
# GITHUB : https://github.com/PARVEJ-143
#-------------------------------------##-------------------------------------#

import base64
exec(base64.b64decode(b''))